/*
--- Day 5: Binary Boarding ---

You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.

You write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.

Instead of zones or groups, this airline uses binary space partitioning to seat people. A seat might be specified like FBFBBFFRLR, where F means "front", B means "back", L means "left", and R means "right".

The first 7 characters will either be F or B; these specify exactly one of the 128 rows on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the front (0 through 63) or the back (64 through 127). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.

For example, consider just the first seven characters of FBFBBFFRLR:

    Start by considering the whole range, rows 0 through 127.
    F means to take the lower half, keeping rows 0 through 63.
    B means to take the upper half, keeping rows 32 through 63.
    F means to take the lower half, keeping rows 32 through 47.
    B means to take the upper half, keeping rows 40 through 47.
    B keeps rows 44 through 47.
    F keeps rows 44 through 45.
    The final F keeps the lower of the two, row 44.

The last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.

For example, consider just the last 3 characters of FBFBBFFRLR:

    Start by considering the whole range, columns 0 through 7.
    R means to take the upper half, keeping columns 4 through 7.
    L means to take the lower half, keeping columns 4 through 5.
    The final R keeps the upper of the two, column 5.

So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.

Every seat also has a unique seat ID: multiply the row by 8, then add the column. In this example, the seat has ID 44 * 8 + 5 = 357.

Here are some other boarding passes:

    BFFFBBFRRR: row 70, column 7, seat ID 567.
    FFFBBBFRRR: row 14, column 7, seat ID 119.
    BBFFBBFRLL: row 102, column 4, seat ID 820.

As a sanity check, look through your list of boarding passes. What is the highest seat ID on a boarding pass?

Your puzzle answer was 944.
--- Part Two ---

Ding! The "fasten seat belt" signs have turned on. Time to find your seat.

It's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.

Your seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.

What is the ID of your seat?

Your puzzle answer was 554.
*/

fn main() {
    let data = "FBBFBBBRLL
FBBFFBFLLL
BFFFFFFLRL
FBFBFFFLRR
BBBFBFBRLL
BFBBFFBRLL
BBFFFFBRLL
BFBFBBBLRR
FFBBFBFLLR
FBBBBFBRRR
FFBFBBFRLR
FBBFFFFRRR
BFBFFBFRRL
FFFBBFFLLL
FFFFBBFLLL
FFBFFBBRLL
FBBBBBFLRR
FFFBFFFLRR
FBBBBBFRLR
BFFBFFBLRL
FBBFBFBRRL
FBFBFBFRRR
FBBBFBFLRR
FFBBFBFRRL
FFBFFBFLRL
BFBFBFBLRR
BBFBBBFRRL
BFBFBBFRLL
FBBFBFBLLR
BFFFBFFLRR
FBBBFFFRLR
FBBFFFFLLL
BFFFBBBLRL
BFBBBFBRLR
BFBBFFFLRL
FFFBFFFRRR
BBFFBFFRLL
FFBFBBFRRR
BBBFFBBLLL
FFBBBFFRRR
BFFBFBBRLR
BBFBBFFRLR
FFBFBBFLRL
BFBBFBBLLL
FBBFBFBLLL
FBBFBBFLRL
BFBFBBBRLR
FFBFFFFLRL
FBBFFFFRLR
BFBBBFBRLL
FFFBBBBLLR
BFFFBFFLLL
BFFBFFFRRR
FBFFFFBRLL
BFBFFFBRLR
FFBBFFFLRL
FFBFBFBLLL
FBFBBFBRLR
BBBFFFFLLR
BBFFBBBRLR
FFBFBFBLRR
BFBBFBFLLL
FFBFFBBLLR
FBBFFBBLLL
BFBFBFFRRR
BBFBBBFRLL
BFBFFBFLRR
BBBFFFFRLR
BFFBFBFLRR
FFFBFFFRLR
FFBBFFBLRL
FFBFFBBLRL
FFBBBBFLLL
FBBBFBBLRR
FFBFBFFRRR
BFFBFBFRRL
FFBBBFFLLL
BFFBBFFLLL
BFBFFFBLRR
FFBBBBFRRR
BBFFBBFRLR
FFFBBFFLRL
BFFBBFFRRL
FFFBBBFLLL
FBBFFBBLRR
BFFFBFFLLR
BBFBFBFLRL
BBFFFFFLRL
FBBBFFBLLR
FBFFFFFLLL
BBFFBBFLRL
FBBBBBFLLR
BBBFBFFLLL
FBBBBBFRRL
BFBBFFBRLR
FFBBBBBLLR
FFBFBFFLRL
BBFBBBBLRR
BBFFBBBRRR
FBFBFBFRLL
FBBBFFFRLL
BFFBBBBLLR
BFFFFFBLLR
FFBBBBFRLL
BFFFFBBLRR
FBBFBBBRLR
BBBFFFBLRL
BFFBBFBRRR
BBFBBFBRRR
BFFBBBBRRR
BBFFBBFLLR
FBFFBBBLLR
BFBBBBFRLL
BBFBFBFLLL
BFBBFFBRRR
FBFBFBFRLR
FFFBFFBLRL
FBFBBFFRLR
BFBFFBBRLL
BBFBFFFRLL
FFFBBBFRLR
FFBBBFBRRR
BBFBFBBRLR
FBFBFBFLRR
BBFFFBBRLL
BBFFBFBLLL
FFFFBFBRRR
BBFFBBBLRL
BBBFFFFLLL
FFBBBFBRLR
FBFFFBFRLR
BFBFBBBLLR
FFFBBFBRLL
BFFFFBBLLR
BFBBBFBLLL
BBFFBFFLRR
FBFFFBFRLL
BBFFFBFLRR
FFBBFFBLRR
FBFFBFFLRL
FFFBBFFRRL
BFFBFFFLRL
FFFFBFBLRL
FBFBBBBRLR
FFBBFBBRLL
FFFBBBFLRL
FFBFBBFLRR
BFBBBBFLRL
FBFBBFBLRL
FBBFFBBRRL
FBFFBBFRRL
BFFBBFFRRR
FBFBFFFRRR
FFBBFBFLLL
FBBFFFBLRL
BFBBBBFLRR
FBFBBFFLRL
BBFBBFBLLL
BBBFFBFRLR
FBBBFFFLRR
BBFFFBFRLR
BBBFFBFLLL
FBBFFFBRRR
FFFBBBFLRR
FFBFBBBRLL
FBFBBFFRRL
BFBBFBFRLL
FBFFBBBLLL
FFFFBBBLLL
FFBBBBBRRL
BBBFBFFLRL
FBBBBFBLRL
BBFFBBBLLL
BFFBFFFLLR
FBBBBBBLLL
FFFBFBBRLL
FFBFBBFLLL
FFBFBBBRLR
BFBBBFBLRR
FBBBBBBLRL
BFBBFBBRRL
BBFBBBFLLR
FBFFBFBRLR
FFBFBBBLRL
FFBBFFFRRR
FBBBBFFLLL
FFBFFBFRLL
FFBFFBBLRR
BFBFFBFRLL
FFFFBFBRLL
FBFFBFBLLR
FFFBFBBLLL
FBBBBBFRRR
FFFBBBBRLL
FBFFBFBLRL
BBFBFBFRRL
FFFBFFBLRR
BFFBFFBRRR
FBFFFFFLRL
FBBFBFFLRR
FBFFBFBLRR
FBFFFBBLLL
FFBBFBBLLL
BFFFFBFLLL
FBBBFBFLRL
BBFBFFBLLR
BBBFFBBRRL
FBFBFFFRLR
FBFFBFBRRR
FBBBFFFRRL
BFBFFBBRLR
FBBFFFFRRL
BBFFFFFRLR
FFFBFBFRLR
FBBFFFFLRL
BBFFBBBLLR
BFFFBFBLLL
FFFBFFFLLR
FBFBBFBRRL
BFBBBFFLLR
BFBFBBFLLR
BFBFBFFLRL
FBFFBBFLLR
FFFBFFFRLL
FBFBFBFLLL
FBFFFBFLLR
FFFBFBBRRR
BFFFBBBRRR
FBBFBFFLLL
BBFFFBBRRL
FBBBFBBLLR
FBFBBFBRRR
BFFFBBFLRR
BBFBFFFRRR
FBBBBBBLRR
BFBFBBFRRR
BBFBBBBRLR
FFBBFFBLLR
FFBFBFFRLL
BBFFBFFRRL
BBFFBFBLRR
FBBBFFBLLL
FBFBFFFLLL
BBBFBFFRRR
BBFFFFBLLR
BBBFBFBLLR
BFBFBFFLLL
BFBFFFBLLL
BBFBFFFRLR
FBFBBBFRLR
FBFBBBFLRR
FBFBBBBLLR
FBBBFBFLLL
FFBBFFBRRR
FBBFBBFLLL
FBFBFFBRRL
BFBFBBBRRR
BFFBBBBLRL
FFFBBBBLLL
BFBBBFFLLL
FBBFFBFRLR
FFFBFFFLRL
BBFFFBBLLR
BBBFFBFRRR
BBFBBBBRRL
FFBFFFFRLR
FFBBBFBLLL
FFBFFFFLLL
BFFFFBFLRR
BFFFBFFRRL
BFBBFBBLRL
FBFBBBFLLR
FFFBFBBLRR
FFBFFBBRRL
FFBBFBBLRR
FFBFFFBRRL
BBBFFFBLRR
BBFBFBBRLL
BFBBBBBLLL
FFBBBBBRLL
FBFBFBBLLR
BFBFFFFLRR
FBBBBBBRLL
FBFFFBBRLL
FBBBBFBLLL
BFFBFFFLLL
BBFBFBFRLR
BFBBBFFLRR
BBFBFFFLRR
BFFBBBFLRL
BFBFFBFLRL
FFFBFBBRRL
BBBFFBBLLR
FBFBBBBLLL
FBBFBBFLLR
FBFFBFBRRL
BFBBFFFLRR
FBFBBBBRRL
FBBBBFBLLR
FBFFFFFLRR
FFBBBFFRLR
BFBBBBBRRL
BBBFFFBLLR
BFFBBBFLRR
FFBBBBBLRR
FBBFFBFRLL
BFBFBFFRRL
FFFBFBFRLL
FFBFFFBRRR
FFFFBBFRLR
BBFFFBFLLL
FFFFBFFRLL
FBBBFBFRRL
FBBBFFFRRR
FFFFBBFRRR
FFBFFFBLRL
BBFBBBFRRR
BFFBFFFRLR
FFFBFBFRRR
FFFFBBBRLL
FBFBFFBLRR
BBFFBFFLLL
BBBFFBBLRL
BBFFBFBLRL
FFBBFBBRRR
BFFBFBBRLL
BFBBBBBRLL
BBFFBBBLRR
FFBBBFBLRR
FBBFBBBLLR
BFBBBBBRRR
BBFBBFFLRR
BBFFFBBLLL
BFBBFFFRRR
BFBBFFBLLL
BFBFBBBLRL
BFBFFBBLRR
BBFFFBBLRL
FBBFFBBRLL
FBFFBFFRLR
FBFFBFFLLR
BFFFBBFLRL
FFBFFBFRRR
BFBFFBFRRR
BFFFFBBRLR
FBBFFBFRRL
FFFBFBBLRL
BFFFBBBRLL
FBFFBFFRRL
BBBFBBFLLL
BBBFFBFLRL
FBFFBBFLLL
FFFFBBFLRR
BFFFFBFRLR
BFBBBFBRRR
BBFBBFFLRL
BFBBFBFRRL
BFFBFBFRLL
FBFFBFFLLL
BFFFBBFRLR
FFBBFBFLRR
BFBBFBBRLL
FFFBBBBLRL
BFBBBFBRRL
FBFFFFFRLR
FFBFBFBLLR
BFBBFBBLLR
BBBFFBFLRR
BFFBBBBRRL
FBBBBFFRLR
FBFFFBFRRL
FFBFFFFRLL
FFBBFBBLLR
BBFBBBBLLR
BFBFBFFRLR
BBBFFFBRLR
BFFBFBBLLL
BFBFBBFRRL
FFFBFFBRRR
FFFBFBBLLR
FFBBFFBRLR
FFFBBBBRLR
FBBFFBFLRR
BFFBFFBLLL
FBFBBBBRRR
FBFFFBBLRL
BBBFBFFRRL
FBFFBBBLRR
BFBBFFFRLL
BFBFFFFRRL
FBFBFFFRLL
BFFFBFBLLR
FBBFBBBLRL
FBBFFFBLLL
FBFBBBFRRR
FFBFFBFLRR
BBFBFBBRRL
BBFBBBFLRL
BBFFFFFRLL
FFBFFBBRLR
BBFBBBBLLL
BBFBFFFLRL
FBFBBFBRLL
FBFFBBBRRR
FBFBFBFRRL
BFFFFFBRRR
FFBFBBBLLL
FFBBFBFLRL
BFFBBBFRLL
FBBBFFBRRR
BFFBFBFLRL
BBFFFBBLRR
BBFFBFBRRL
FBFBFBFLLR
FFBFBFBRRL
BFFFFBBRLL
BBFFFFBRRL
FFBBFFBRLL
BFFBBFBRLL
FBBBFFBRLL
BFBFFFBLLR
FFFBFBFRRL
BBFFBFBRRR
BFFFFFFLLR
FBBFBFFRRL
BFFBBBBLLL
FFBBFFFLLL
FBBFFBBLLR
FFFFBBFRLL
FBFBFFFRRL
BFFFBBFRRR
BBFBFFBRRL
BFFBFBBRRR
BFBFFBFRLR
BBFBFFBLRR
BFBBFBBRRR
BFBFFFFRLL
BBFFBBBRLL
FFBFFFFLRR
BBBFBFFLLR
FFFBBFBRLR
BFBBFFFLLL
FBBBFBBRLR
FFBFFBFRLR
FBFBBFBLLL
FBBBFBFRRR
FBFFFBBRRR
BFFBFBFRRR
FFBBBBFRRL
BBFBFBBLLL
BBFFBFBLLR
BBBFFFFRRL
FFBFFFFRRR
BBFFBBFRRR
FFBBBFBLRL
FBBFBFBLRL
FBBBFBFRLR
BFFBFBFRLR
BFFFBFBRRR
FFBBFFFRLL
FBFFBFBRLL
FFBBBFFLRR
FBBBFBBRRL
BBFBBBBLRL
BFFFBBBLLR
BFBBBBBLRL
BFFFFBFLRL
BFFFFFFRLL
FFFFBBBRRL
FFBFBBFRRL
BBBFFBFRRL
FBBFBFFLRL
BBBFBFBLRL
FBBFBBFRRL
FBFBFFBLLL
FBBBBBBLLR
BBBFFFBRRL
FFBFBBFLLR
BFBFFBBRRL
FFBFFFBLRR
BBFBFBFRRR
FBBBBFBLRR
FFBBFBFRRR
BFBBFBFLRL
BBFFBFFLLR
FFFFBBBLLR
FFFBBFBLLL
FFBBFFFRRL
BFFBBBFRRL
BFBBBBBLLR
BBBFFFFRRR
FBFFBBBRLR
FBFFBFFRRR
FFFBFBFLRL
FBFFBFFRLL
FBBBFFFLLL
BFFFFFBLRR
BFBBFBFRLR
FBFBBBBRLL
FBFBBBFLRL
FFFBBFBLRR
BBFBBBFRLR
FBFFFFBLLR
BBBFFBFRLL
FBBFBFFRLR
BFFFBBFRRL
BFFFFBBRRR
FBFFBFBLLL
BFBFFFBRRR
BFBFBBFLRR
FBFFBBBLRL
FFBFBBFRLL
FBBBFBFRLL
FFBFFBBRRR
FBBFFBBRLR
BFFBFBBLRL
FFBFBFFRRL
FBBFFFFLRR
BBFBBFFRRR
BFBBFFFRRL
FBBFFFBRLL
FFBBBBFRLR
BBFFBBFRRL
BFBBFBFRRR
BFFBBFFLLR
BBFFBBFLRR
BBFBBFFLLR
BFFFBBFLLL
FBBBFFBRRL
BBFFFFFLRR
BFFFBBBRLR
BFBFBBFLRL
BBFBBFBLRR
FFBFFFFRRL
BFFBBBFLLL
FBFBFBBRLR
FFBBFFFLLR
FFFBFFFRRL
BBFBBFBRRL
BBFFFFFLLR
FFFFBFBRLR
BFFFFBFRLL
BBBFBFFRLR
BFFFFBBLRL
BFFBBFFLRR
FBFFFBBLRR
BFFFBBBLLL
BFFBBBFLLR
BFFBBFBRRL
FBBFBFBRRR
FBFBFFFLLR
FFFBBFFRLR
FFBFBFFLLR
FBBFFBFRRR
FBFFBBFRLR
FBBFFFBRLR
BFBFFFBRRL
BFFFFBFLLR
BBBFFFFLRR
BFBFBFFRLL
FBFBFBBRRL
FFBFBFFLLL
BBFFFFBRRR
FBFBBFFRLL
BBFFFFFLLL
FFFFBBBLRL
BFFFFBBLLL
FFFBFBFLLL
FFFFBFBLLR
FFFBBFBLLR
FFFBBFBLRL
FFFFBFFRRR
BBFFFFBLRL
BFBBBBFLLR
BBFBFBBLLR
BFFFFFFRLR
FBBFFFFRLL
FFFBFFBLLL
BBBFFBBRRR
BBFBFBBLRR
FBBBBFFLRL
FFBBBFFLLR
FBBBBFFRLL
BBFBFBFLRR
BFFBFBBLLR
BBBFFFFRLL
FBFBFFBRRR
FBFBFFBLLR
FFFBBFBRRL
FBBBBBBRLR
FBFFFFBRRL
FFBBFBBRRL
BBBFFFBRLL
FFFBFFBLLR
BFBFBBFLLL
BFFBFBFLLR
BBFFBBFRLL
BFFFBBFLLR
BFBBFBFLRR
FBBFFBFLLR
BBFBBFFRLL
FFBBBBBRRR
FFFBBFFLLR
BBBFFBFLLR
BBFBFFBLLL
FFBBFBBRLR
FBBBBBFRLL
BBFBFFBRLR
BBFFBFBRLL
BFFBFFBLLR
FBFFBFFLRR
FBFFFBFLRL
BFBBFFFLLR
FBBFBFFRRR
FBFBFBBLRR
BFBBBBFRRR
BFBFFFFLRL
FFFBFFFLLL
FFFBBBFRLL
FFFBBBFRRR
FBBBBBFLRL
BBFFFFBLRR
BFFBBBFRLR
BFFBFFBRLR
FBBBBFBRLR
FFBFBBBLRR
BBFBFFFRRL
BFFBFBBLRR
BFFBBFFLRL
BFBFFFFRRR
FBBBFBBLRL
BFBBBFFRRL
FBFBBBFLLL
BFFBBBBRLL
FBBFFFBLLR
BBBFBFFLRR
FBFFBBFLRR
BFBBFFBLLR
BFFBBFFRLR
BBFFBBBRRL
BFFBBFBLLR
FBBBBBFLLL
BBFFFBFLLR
BFBBBFFLRL
FFBBFBBLRL
BBFBFBFLLR
BBFFFBFRLL
BFFFFFBRRL
BBBFBFBRLR
FFFBBBBRRR
FBFBBFFRRR
BFFBFFFRRL
BFFFBFFRLR
BFFFBFBLRR
BBFBBBFLLL
BFBFFFFLLL
BBFBBFBLLR
BFFFBBFRLL
FFFBFFBRLL
FBFFFFBLLL
BFBFFFFLLR
BFBFFBBLLR
FBFFBBFRRR
FBFBBBFRRL
BFFBBFBRLR
BBFFFFBLLL
BFBBBFFRLL
BBBFFBBRLL
FBFFFFBRLR
BFBFFBBLLL
FBFBFBBRLL
FFBFFFBRLL
FFFBFFBRLR
FBFFFBFLLL
FFFFBFFRLR
BBFBBFFLLL
FFFFBFBLRR
BFBFFFBLRL
FBBBBFFRRR
BBBFFFBRRR
FBBFBFFRLL
FFBFFBFRRL
BBFBBFBRLR
FFBFBFFRLR
BFBFBFBRRL
FFFBFBBRLR
BFBBBFFRRR
FBFFFFBLRR
FFBBBFBLLR
FBBBFFBLRL
FFFBBFFRLL
FBBFFBBLRL
BFFBBFBLRL
FBBBBFFLRR
BFFFFFFLRR
FBFBBBBLRL
FFBBFFFRLR
BFFFFBFRRL
BBBFBFBRRR
FFFBBFBRRR
FFFFBBBRLR
FFFFBBFLRL
FBBFBBFRLL
BBBFBFFRLL
BFBFFFFRLR
BFBFBFBRRR
FBFFFFFLLR
BFFBFFFLRR
FFBFBFBRLR
BFBBBFBLLR
BBFBFBFRLL
BFFFFFFRRR
BBBFBFBRRL
FBFBBFFLRR
BFBBFFBRRL
BFBFFFBRLL
BFBFFBFLLL
BBBFBFBLRR
BBFBBBBRLL
FFBFFBBLLL
BBFBBFBLRL
FBFBBFFLLL
FBBFFBFLRL
BBFFFBBRRR
FFBBFBFRLL
BFFFFFBRLR
FFBFFBFLLL
BBFFBBFLLL
BFFBFFBLRR
FFBBFFBLLL
FFFBFBFLLR
FBFFBBBRRL
FBFFFBFLRR
BBFFFFFRRR
FFBFBFBRRR
FBBBFBBRRR
FBFBFFBRLL
FBBBBFBRRL
BBFFFFBRLR
FFBFBFFLRR
FFBFFFBLLR
BBBFFBBLRR
BFFFFFBRLL
BFFFFBFRRR
FFBBBBBLRL
FFFFBBBLRR
FBBFBFBLRR
FFBFFBFLLR
FBBFBFBRLL
BFBBFBBLRR
BFBBBFBLRL
BBFBBFFRRL
BFBFBFBLRL
FBFFFFBLRL
FBFBBFBLLR
FFFFBFFRRL
FFFBBFFRRR
FBFFFFFRLL
FBFBBFBLRR
FFBFFFBLLL
BFFFFFFRRL
FBBFBBBRRL
BFFFFFBLLL
FFBBFFBRRL
FBFFFBBRLR
BFBFBFFLRR
FBBBBFFRRL
FBBFFFBLRR
FBFFFBFRRR
FBBBFBFLLR
FFFBBBBRRL
FBBBBFFLLR
BFBFFBBLRL
FBFBFBBRRR
BBFBFFFLLL
FFBBFFFLRR
BFFFFBBRRL
FBBBBBBRRL
BFBFBBFRLR
BFBFBFBLLR
FBBFBFFLLR
BFFFFFFLLL
BBBFBFBLLL
BFBBFFFRLR
FBFFBBBRLL
BFFBFFBRLL
BFFBBFFRLL
FFBBBFFLRL
FBBFBBBLLL
FFFFBFBRRL
BFBFBBBRRL
BFFBBBBLRR
BBFBFBBLRL
FFBBBBFLRL
BFBBBBFRRL
BFFFBFBRLR
FFFBBBFLLR
FBFBFFBLRL
FFBBBFFRRL
FBBBFFBRLR
FFBFFFFLLR
FFBFBFBLRL
BBBFFBBRLR
FBFBBBBLRR
BFBFBFBRLL
FFBBBBBLLL
FBFBFFFLRL
FFFBFFBRRL
FBFFFFFRRR
BFBBBFFRLR
FBFBFBFLRL
BFBFBFFLLR
FBFBBBFRLL
BFBBBBBLRR
FBBFBBFRRR
BFFFBFFRLL
FFFBFBFLRR
FFFBBFFLRR
BFBFBFBRLR
FBBBFFFLLR
FBFFFFBRRR
FBBFFFFLLR
BFFBFFFRLL
FBBBFBBRLL
FBFBFBBLLL
BFFBFBFLLL
FFFBBBFRRL
FFFFBBFRRL
FBFBBFFLLR
BBFBFFBRRR
BFBBFFBLRL
FFFFBFBLLL
BFBFFBFLLR
BFFBBFBLLL
FBBBBBBRRR
FBBFFFBRRL
BFFFBBBRRL
BBFBBBBRRR
BBFFFBFRRL
BBFBFFFLLR
BFFFBFFRRR
BFBFBBBLLL
BBFFFBFRRR
BBFFBFBRLR
FBFBFBBLRL
BFBBFFBLRR
BBFBFFBRLL
BFFBBBBRLR
FBBFBBFRLR
FFBFBBBLLR
BFBFFBBRRR
FBBBFFFLRL
BBBFFFFLRL
BFBBBBFRLR
BFFFBFBRRL
FBFFFFFRRL
BBFFFFFRRL
FBFFBBFLRL
FBBFBBBRRR
BFBBBBBRLR
BBFFBFFRLR
FBBFFBBRRR
BBBFFFBLLL
FFBBBFFRLL
BBFFFBBRLR
FFBBBBFLLR
FFBBBFBRLL
BFFFBBBLRR
FFFBBBBLRR
FFBFBBBRRR
FFBFBBBRRL
BBFBBBFLRR
FBBFBBBLRR
FBFBFFBRLR
FBFFBBFRLL
BBFFFBFLRL
FBBFBFBRLR
BFBBBBFLLL
FBBFBBFLRR
FBFFFBBRRL
BBFFBFFLRL
BFFBBBFRRR
BFFBBFBLRR
FBFFFBBLLR
BFFFBFBRLL
FFBFBFBRLL
BBFBBFBRLL
BFFBFFBRRL
FFFFBBFLLR
BFBFBBBRLL
FFFFBBBRRR
FFBBBFBRRL
BFFBFBBRRL
BFBFBFBLLL
FFBFFFBRLR
FFBBFBFRLR
FBBBFFBLRR
BBFFBFFRRR
BFFFBFFLRL
BFBBFBFLLR
BBFBFFBLRL
FBBBFBBLLL
FFBBBBBRLR
BFBBFBBRLR
FBBBBFBRLL
FFBBBBFLRR
BFFFFFBLRL
BBFBFBBRRR";
    let _test = "BFFFBBFRRR: row 70, column 7, seat ID 567.
FFFBBBFRRR: row 14, column 7, seat ID 119.
BBFFBBFRLL: row 102, column 4, seat ID 820.";

    let mut data: Vec<_> = data
        .split("\n")
        .map(|s| {
            isize::from_str_radix(
                &s.to_string()
                    .chars()
                    .skip(0)
                    .take(10)
                    .collect::<String>()
                    .replace("F", "0")
                    .replace("B", "1")
                    .replace("L", "0")
                    .replace("R", "1"),
                2,
            )
            .unwrap()
        })
        .collect();
    data.sort();
    println!("The highest seat id is {}", data.iter().max().unwrap());
    let d: Vec<_> = data.windows(2).map(|t| t[1] - t[0]).collect();
    let gap = d.iter().position(|&r| r == 2).unwrap();
    println!(
        "Find the missing id in this list {:?}",
        &data[gap - 4..gap + 6]
    );
}
